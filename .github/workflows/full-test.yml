name: Full test

on: [push, workflow_dispatch]

jobs:
  configuration-test-unsafe:
    strategy:
      matrix:
        param:
          - --solver cvc5                ./benchmarks/circomlib-cff5ab6/Decoder@multiplexer.r1cs
          - --solver z3                  ./benchmarks/circomlib-cff5ab6/Decoder@multiplexer.r1cs
          - --solver cvc5 --opt-level 0  ./benchmarks/circomlib-cff5ab6/Decoder@multiplexer.circom
          - --solver cvc5 --opt-level 2  ./benchmarks/circomlib-cff5ab6/Decoder@multiplexer.circom
          - ./tests/sr1cs/unsafe.sr1cs
    runs-on: ubuntu-latest
    container:
      image: veridise/picus:git-latest
    env:
      PLTADDONDIR: /root/.local/share/racket/
    steps:
      - uses: actions/checkout@v1
      - name: linking circom
        run: ln -s /root/.cargo/bin/circom /usr/bin/circom
      - name: compile circomlib
        run: bash ./scripts/prepare-circomlib.sh
      - name: run picus with param ${{ matrix.param }}
        run: |
          set +e
          racket ./picus.rkt ${{ matrix.param }} | tee result.out
          code=$?
          if [ $code -ne 9 ]; then
            echo "original exit code: $code"
            exit 1
          fi
        shell: bash # this ensures that pipefail is set
      - name: test expected result
        run: |
          grep "^The circuit is underconstrained$" ./result.out

  configuration-test-safe:
    strategy:
      matrix:
        param:
          - --solver cvc5                ./benchmarks/circomlib-cff5ab6/AND@gates.r1cs
          - --solver z3                  ./benchmarks/circomlib-cff5ab6/AND@gates.r1cs
          - --solver cvc5 --opt-level 0  ./benchmarks/circomlib-cff5ab6/AND@gates.circom
          - --solver cvc5 --opt-level 2  ./benchmarks/circomlib-cff5ab6/AND@gates.circom
          - ./tests/sr1cs/safe.sr1cs
    runs-on: ubuntu-latest
    container:
      image: veridise/picus:git-latest
    env:
      PLTADDONDIR: /root/.local/share/racket/
    steps:
      - uses: actions/checkout@v1
      - name: linking circom
        run: ln -s /root/.cargo/bin/circom /usr/bin/circom
      - name: compile circomlib
        run: bash ./scripts/prepare-circomlib.sh
      - name: run picus with param ${{ matrix.param }}
        run: |
          set +e
          racket ./picus.rkt ${{ matrix.param }} | tee result.out
          code=$?
          if [ $code -ne 8 ]; then
            echo "original exit code: $code"
            exit 1
          fi
        shell: bash # this ensures that pipefail is set
      - name: test expected result
        run: |
          grep "^The circuit is properly constrained$" ./result.out

  wtns-test:
    runs-on: ubuntu-latest
    container:
      image: veridise/picus:git-latest
    env:
      PLTADDONDIR: /root/.local/share/racket/
    steps:
      - uses: actions/checkout@v1
      - name: linking circom
        run: ln -s /root/.cargo/bin/circom /usr/bin/circom
      - name: run picus
        run: |
          set +e
          racket ./picus.rkt --wtns . ./benchmarks/circomlib-cff5ab6/Decoder@multiplexer.circom
          code=$?
          if [ $code -ne 9 ]; then
            echo "original exit code: $code"
            exit 1
          fi
        shell: bash # this ensures that pipefail is set
      - name: test expected result
        run: |
          diff first-witness.wtns tests/data/first-witness.wtns.expect
          diff second-witness.wtns tests/data/second-witness.wtns.expect

  # run the full test with cvc5
  main-test:
    strategy:
      matrix:
        id: [0, 1, 2, 3]
    runs-on: ubuntu-latest
    container:
      image: veridise/picus:git-latest
    env:
      PLTADDONDIR: /root/.local/share/racket/
    steps:
      - uses: actions/checkout@v1
      - name: linking circom
        run: ln -s /root/.cargo/bin/circom /usr/bin/circom
      - name: run picus with cvc5, using v3
        run: raco test ++args "--parallel ${{ matrix.id }} 4" ./tests/circomlib-test.rkt

  misc-test:
    runs-on: ubuntu-latest
    container:
      image: veridise/picus:git-latest
    env:
      PLTADDONDIR: /root/.local/share/racket/
    steps:
      - uses: actions/checkout@v1
      - name: run tests
        run: |
          raco test ./tests/performance-test.rkt
          raco test ./tests/framework-test.rkt
